La m√©canique permettant la **suppression automatique des fichiers apr√®s une p√©riode de r√©tention d√©finie** sur Amazon S3 s'appelle la **Gestion du Cycle de Vie (S3 Lifecycle)**.

Vous mettez en ≈ìuvre cette m√©canique en cr√©ant une **r√®gle de cycle de vie** sur votre compartiment (bucket) S3, en d√©finissant l'action d'**Expiration** (suppression).

---

## 1. Principe de la Gestion du Cycle de Vie S3

La Gestion du Cycle de Vie S3 vous permet de d√©finir des **r√®gles** pour automatiser des actions sur vos objets (fichiers) en fonction de leur √¢ge ou de leur anciennet√©.

Pour la suppression automatique, vous utilisez l'action d'**Expiration**.

---

## 2. Mise en ≈íuvre de l'Expiration

L'impl√©mentation se fait g√©n√©ralement via la **console AWS**, l'**AWS CLI**, ou un **SDK AWS**.

### A. Cr√©ation d'une R√®gle d'Expiration

1.  **Acc√©dez √† votre compartiment S3** dans la console AWS.
2.  Allez dans l'onglet **Gestion** (Management).
3.  Cliquez sur **Cr√©er une r√®gle de cycle de vie** (Create lifecycle rule).

### B. Configuration de la R√®gle de Suppression

Vous devez d√©finir les param√®tres suivants pour la r√®gle d'expiration :

| Param√®tre | Description |
| :--- | :--- |
| **Nom de la r√®gle** | Un nom descriptif pour votre r√®gle (par exemple, `Suppression-apres-30-jours`). |
| **Port√©e de la r√®gle** | D√©finissez √† quels objets la r√®gle doit s'appliquer : |
| | - **Appliquer √† tous les objets du compartiment** (Applicable √† tous les fichiers). |
| | - **Limiter la port√©e de cette r√®gle en utilisant un ou plusieurs filtres** (Permet de cibler des fichiers avec un **pr√©fixe** sp√©cifique ‚Äì l'√©quivalent d'un ¬´ dossier ¬ª ‚Äì ou des **balises**). |
| **Actions de r√®gle de cycle de vie** | Cochez l'option : **Expirer les versions actuelles d'objets** (Expire current versions of objects). |
| **Jours apr√®s la cr√©ation de l'objet** | Saisissez le **nombre de jours** apr√®s lesquels vous souhaitez que les objets soient automatiquement supprim√©s (par exemple, **30** pour une r√©tention de 30 jours). |

### C. Cas Particulier : Gestion des Versions (Versioning)

Si la gestion des versions (Versioning) est activ√©e sur votre compartiment S3, vous devrez ajouter une action d'expiration suppl√©mentaire pour les versions non actuelles des objets :

* Cochez l'option : **Supprimer d√©finitivement les versions anciennes d'objets** (Permanently delete noncurrent versions of objects).
* Sp√©cifiez le **nombre de jours apr√®s que les objets sont devenus anciens** (non actuels) avant leur suppression d√©finitive.

Amazon S3 ex√©cute ensuite cette r√®gle quotidiennement (une fois par jour) pour identifier et marquer les objets √©ligibles √† la suppression. Vous ne serez plus factur√© pour les objets marqu√©s pour suppression.
---

**Objet : Demande de Test : Impl√©mentation des R√®gles de R√©tention (Cycle de Vie) S3 pour l'Alignement z/OS**

Cher Exploitants,

Afin d'assurer la conformit√© et d'aligner nos pratiques de gestion des donn√©es sur S3 avec nos standards Mainframe (z/OS, DFSMShsm), j'aimerais demander la mise en place d'un environnement de test pour les fonctionnalit√©s de **Gestion du Cycle de Vie (Lifecycle Management)** d'Amazon S3.

### üéØ Contexte et Objectif

Le besoin principal est de pouvoir **automatiser la suppression de fichiers** sur S3 apr√®s l'atteinte de leur dur√©e de r√©tention, une fonction que nous g√©rons actuellement sur z/OS. Sans cette automatisation, nous risquons une augmentation non ma√Ætris√©e des co√ªts de stockage et des probl√®mes de conformit√©.

L'objectif de ce test est de v√©rifier que nous pouvons :

1.  **Cr√©er des r√®gles d'expiration** qui simulent la r√©tention des ensembles de donn√©es (Data Sets) de z/OS.
2.  **Appliquer des dur√©es de r√©tention diff√©rentes** pour des fichiers au sein du m√™me *bucket*, en utilisant les **pr√©fixes** (dossiers virtuels) ou les **balises (Tags)**.

### üìù Demande de Mise en Place

Je vous prie de bien vouloir pr√©parer un environnement (id√©alement un *bucket* de test d√©di√©) sur lequel je pourrai collaborer avec vous pour d√©finir et tester ces r√®gles.

Pourriez-vous m'indiquer la meilleure fa√ßon de proc√©der et la personne √† contacter pour planifier cette mise en ≈ìuvre ?

Cordialement,

[Votre Nom]
[Votre Fonction]

-----------

Voici un mod√®le d'e-mail que vous pouvez envoyer √† votre exploitant. Il est formul√© de mani√®re professionnelle, explique clairement le besoin (simuler la r√©tention z/OS) et demande la mise en place d'un test.

---

**Objet : Demande de Test : Impl√©mentation des R√®gles de R√©tention (Cycle de Vie) S3 pour l'Alignement z/OS**

Cher Exploitants,

Afin d'assurer la conformit√© et d'aligner nos pratiques de gestion des donn√©es sur S3 avec nos standards Mainframe (z/OS, DFSMShsm), j'aimerais demander la mise en place d'un environnement de test pour les fonctionnalit√©s de **Gestion du Cycle de Vie (Lifecycle Management)** d'Amazon S3.

### üéØ Contexte et Objectif

Le besoin principal est de pouvoir **automatiser la suppression de fichiers** sur S3 apr√®s l'atteinte de leur dur√©e de r√©tention, une fonction que nous g√©rons actuellement sur z/OS. Sans cette automatisation, nous risquons une augmentation non ma√Ætris√©e des co√ªts de stockage et des probl√®mes de conformit√©.

L'objectif de ce test est de v√©rifier que nous pouvons :

1.  **Cr√©er des r√®gles d'expiration** qui simulent la r√©tention des ensembles de donn√©es (Data Sets) de z/OS.
2.  **Appliquer des dur√©es de r√©tention diff√©rentes** pour des fichiers au sein du m√™me *bucket*, en utilisant les **pr√©fixes** (dossiers virtuels) ou les **balises (Tags)**.

### üìù Demande de Mise en Place

Je vous prie de bien vouloir pr√©parer un environnement (id√©alement un *bucket* de test d√©di√©) sur lequel je pourrai collaborer avec vous pour d√©finir et tester ces r√®gles.

Pourriez-vous m'indiquer la meilleure fa√ßon de proc√©der et la personne √† contacter pour planifier cette mise en ≈ìuvre ?

Cordialement,

[Votre Nom]
[Votre Fonction]

-------------

Ecris un programme Python sur la base de ces sp√©cificiations focntionnelles : Sp√©cification de la cha√Æne de date dans les fichiers Chaque fichier contient une cha√Æne de caract√®res repr√©sentant une date, encod√©e selon le format suivant : - Pr√©fixe fixe : La lettre majuscule 'D' indique le d√©but de la cha√Æne. - Jour du mois : Deux chiffres (DD) repr√©sentant le jour, de 01 √† 31. - Mois : Un seul caract√®re (M) repr√©sentant le mois : - Chiffres de 1 √† 9 pour les mois de janvier √† septembre. - Lettres : 'J' pour octobre 'K' pour novembre 'L' pour d√©cembre Ann√©e : Un seul chiffre (Y) correspondant au dernier chiffre de l‚Äôann√©e (ex. : '5' pour 2025).

# On importe deux modules standards :
# - 're' pour utiliser les expressions r√©guli√®res (utile pour v√©rifier le format d'une cha√Æne de texte)
# - 'datetime' pour obtenir la date du jour et manipuler les dates
import re
from datetime import datetime

# üìÖ Dictionnaire qui associe chaque code de mois √† son nom en fran√ßais
# Les chiffres de 1 √† 9 repr√©sentent janvier √† septembre
# Les lettres J, K, L repr√©sentent octobre, novembre, d√©cembre
MONTH_MAP = {
    '1': 'janvier',
    '2': 'f√©vrier',
    '3': 'mars',
    '4': 'avril',
    '5': 'mai',
    '6': 'juin',
    '7': 'juillet',
    '8': 'ao√ªt',
    '9': 'septembre',
    'J': 'octobre',
    'K': 'novembre',
    'L': 'd√©cembre'
}

# üîÅ Fonction pour encoder la date du jour dans le format personnalis√©
def encode_today():
    """
    Cette fonction transforme la date du jour en une cha√Æne au format : DDDMY
    Exemple : 28 septembre 2025 ‚Üí D28L5
    """
    # On r√©cup√®re la date actuelle
    today = datetime.now()

    # On extrait le jour, le mois et l'ann√©e
    day = today.day
    month = today.month
    year = today.year

    # On convertit le mois en code selon les r√®gles :
    # - 1 √† 9 ‚Üí chiffres
    # - 10 ‚Üí J, 11 ‚Üí K, 12 ‚Üí L
    if 1 <= month <= 9:
        month_code = str(month)
    elif month == 10:
        month_code = 'J'
    elif month == 11:
        month_code = 'K'
    elif month == 12:
        month_code = 'L'
    else:
        raise ValueError("Mois invalide")

    # On prend le dernier chiffre de l'ann√©e (ex : 2025 ‚Üí '5')
    year_digit = str(year % 10)

    # On assemble la cha√Æne finale avec le pr√©fixe 'D'
    return f"D{day:02d}{month_code}{year_digit}"

# üîç Fonction pour d√©coder une cha√Æne de date au format personnalis√©
def decode_date_string(date_str):
    """
    Cette fonction prend une cha√Æne comme 'D15K5' et la transforme en date lisible : '15 novembre 2025'

    Param√®tre :
        date_str (str) : cha√Æne √† d√©coder

    Retour :
        str : date lisible en fran√ßais
    """

    # Expression r√©guli√®re pour v√©rifier le format :
    # - Commence par 'D'
    # - Deux chiffres pour le jour
    # - Un caract√®re pour le mois (1-9 ou J/K/L)
    # - Un chiffre pour l'ann√©e
    pattern = r'^D(\d{2})([1-9JKL])(\d)$'

    # On v√©rifie si la cha√Æne correspond au format
    match = re.match(pattern, date_str)

    # Si le format est incorrect, on l√®ve une erreur
    if not match:
        raise ValueError("Format de date invalide")

    # Si le format est bon, on extrait les trois parties
    day, month_code, year_digit = match.groups()

    # On convertit le jour en entier et on v√©rifie qu‚Äôil est entre 1 et 31
    day_int = int(day)
    if not (1 <= day_int <= 31):
        raise ValueError("Jour invalide")

    # On r√©cup√®re le nom du mois √† partir du dictionnaire
    month_name = MONTH_MAP.get(month_code)
    if not month_name:
        raise ValueError("Code mois invalide")

    # On reconstruit l‚Äôann√©e compl√®te :
    # Exemple : si on est en 2025 et que le chiffre est '5', on suppose que c‚Äôest 2025
    current_year = datetime.now().year
    decade = current_year - (current_year % 10)
    year = decade + int(year_digit)

    # On retourne la date sous forme lisible
    return f"{day_int} {month_name} {year}"

# üé¨ Programme principal : test avec la date du jour
if __name__ == "__main__":
    # On encode la date du jour
    encoded_today = encode_today()
    print(f"Cha√Æne encod√©e aujourd‚Äôhui : {encoded_today}")

    # On essaie de d√©coder cette cha√Æne
    try:
        decoded_today = decode_date_string(encoded_today)
        print(f"Date d√©cod√©e : {decoded_today}")
    except ValueError as e:
        # Si une erreur survient, on l‚Äôaffiche
        print(f"Erreur : {e}")

