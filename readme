Absolument \! Commen√ßons par les briques de base de votre pipeline. C'est un excellent point de d√©part. üöÄ

## Les Fondamentaux : Stages et Jobs

Le **Job (T√¢che)** est l'unit√© de travail la plus petite (ex: compiler le code, lancer les tests unitaires).

Le **Stage (√âtape)** est un regroupement logique de Jobs. Les stages d√©finissent l'ordre d'ex√©cution de votre pipeline :

  * Tous les **Stages** s'ex√©cutent **s√©quentiellement** (l'un apr√®s l'autre). Si un Job d'un Stage √©choue, le Stage suivant ne d√©marre pas.
  * Tous les **Jobs** au sein d'un m√™me Stage s'ex√©cutent **en parall√®le** pour gagner du temps.

Voici comment la s√©quence de stages est structur√©e :

```mermaid
graph TD
    A[Code Commit] --> B(Pipeline D√©clench√©e);
    B --> C(Stage 1: Build);
    C --> D(Stage 2: Test);
    D --> E(Stage 3: Deploy);
    E --> F[Pipeline Termin√©e];
```

-----

## Le R√¥le des Runners

Le **Runner (Ex√©cuteur)** est la troisi√®me pi√®ce ma√Ætresse. Si un Job est la *d√©finition* de ce qu'il faut faire (ex: `npm install`), le Runner est la *machine* (serveur, VM, conteneur) qui lit cette d√©finition et **ex√©cute r√©ellement la commande**.

Pour qu'un pipeline fonctionne, il faut qu'un Runner soit **enregistr√©** aupr√®s de votre instance GitLab (votre 16.11.10-ee) et soit disponible pour "prendre en charge" les Jobs.

-----

**Question pour continuer :**

Toutes ces r√®gles (la s√©quence des stages, le script du job) sont d√©finies dans un seul fichier √† la racine de votre projet. Quel est le nom de ce fichier de configuration essentiel dans GitLab CI/CD ?
