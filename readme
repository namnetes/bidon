Fantastique \! C'est la confirmation que nous attendions. üöÄ

Avec SSH, ton compte utilisateur et Python 3 d√©j√† en place sur la machine distante, toutes les pi√®ces du puzzle sont l√†. Tu n'as pas besoin de te soucier des √©tapes de configuration, ce qui te permet de passer directement √† la pratique d'Ansible.

Tu peux maintenant t'attaquer √† la cr√©ation et √† l'ex√©cution de ton premier **playbook**. L'objectif est de s'assurer que tu peux bien interagir avec ta machine distante.

-----

### Cr√©ation du premier playbook

Un playbook est un fichier au format **YAML** qui d√©crit les t√¢ches √† automatiser. Il se compose de plusieurs √©l√©ments :

1.  **H√¥tes cibles :** O√π le playbook doit-il s'ex√©cuter ?
2.  **T√¢ches :** Que doit-il faire ?

Pour ce premier essai, nous allons cr√©er un playbook simple qui va cr√©er un r√©pertoire `ansible-test` dans le dossier de ton utilisateur sur la machine distante.

Cr√©e un fichier nomm√© `premier_playbook.yml` dans ton dossier de travail (`/ansible` dans ton conteneur) avec le contenu suivant :

```yaml
---
- name: Cr√©er un r√©pertoire de test Ansible
  hosts: all
  tasks:
    - name: V√©rifier la connexion avec le module ping
      ansible.builtin.ping:

    - name: Cr√©er le r√©pertoire ansible-test
      ansible.builtin.file:
        path: /home/{{ ansible_user }}/ansible-test
        state: directory
        mode: '0755'
```

  * `name`: Donne un titre √† ton playbook et √† chaque t√¢che.
  * `hosts: all`: Cible toutes les machines d√©finies dans ton inventaire.
  * `tasks`: La liste des actions qu'Ansible doit effectuer.
  * `ansible.builtin.ping`: Le module `ping` v√©rifie simplement que la connexion fonctionne. C'est un excellent moyen de s'assurer que tout est pr√™t.
  * `ansible.builtin.file`: Ce module est tr√®s puissant. `state: directory` lui demande de s'assurer que le r√©pertoire `path` existe.
  * `{{ ansible_user }}`: C'est une variable magique d'Ansible qui contient le nom de l'utilisateur avec lequel tu te connectes (ici, ton compte). L'utiliser rend ton playbook plus g√©n√©rique.

-----

### Cr√©ation du fichier d'inventaire

Ansible a besoin de savoir √† quelles machines il doit se connecter. Tu dois donc cr√©er un fichier d'inventaire. C'est un fichier texte o√π tu listes tes h√¥tes.

Cr√©e un fichier nomm√© `hosts` dans le m√™me dossier que ton playbook (`/ansible`) avec le contenu suivant :

```ini
[remote_host]
votre_machine_distante ansible_host=adresse_ip ansible_user=votre_nom_utilisateur ansible_private_key_file=/ansible/id_rsa
```

Remplace `votre_machine_distante` par le nom de ton choix, `adresse_ip` par l'adresse IP de ta machine, `votre_nom_utilisateur` par ton nom d'utilisateur et `id_rsa` par le nom de la cl√© que tu as g√©n√©r√©e.

-----

### Lancement du playbook

Maintenant que tout est en place, tu peux lancer le playbook depuis ton conteneur Ansible avec la commande `ansible-playbook`.

```bash
ansible-playbook -i /ansible/hosts /ansible/premier_playbook.yml
```

L'option `-i` indique √† Ansible quel fichier d'inventaire utiliser.

Que se passe-t-il lorsque tu lances la commande ?
