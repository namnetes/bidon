
Hello,

First, I would like to apologize for my level of English and for my pronunciation. It may not always be easy to understand.

I am not fluent and This is the first time I'm doing an exercise like this. I'm afraid you're going to suffer."

If no one objects, I’ll record this exchange. Is that okay for everyone ?

Today, we are very happy to welcome Preethi. She is our main contact at Rocket Software, for ChangeMan. Thank's preethi to joining us,

The goal of this session is to show you some of the features of ChangeMan that we use in our mainframe modernization work.

Before we begin, I would like to explain what this session is not about: we are not going to compare ChangeMan with other tools like LCM CCC, Endevor, or IBM RTC.

Today’s agenda:

- A small topic related to Python in our CI/CD process with ChangeMan  
- An overview of how we use Java, Python, and z/OS Connect in our CI/CD process with ChangeMan  
- A short demo of how XML services are used with TSO and the 3270 interface  
- And finally, a demo of a Python tool that we have built using ChangeMan’s APIs and the IBM API, to manage ChangeMan objets. 

 let’s start by saying who we are., I will go first:

My name is Alan Marchand. I lead the Mainframe Support and Assistance Squad. We help around 300 mainframe developers. They are part of 95 squads

Let’s start this demo with the first topic: Python.


-----------------------

Let’s go to USS from the console  

Here, in my personal space  

It’s big enough — can you see it well?  

Let’s create a folder for the tests  

Go inside the folder and create an empty Python file  

Let’s check what’s inside the folder  

---

One note...  
On z/OS, there are two parts:  
– The historical MVS system, in France it uses IBM-1147 encoding  
– And USS, which uses IBM-1047.

But we can also use another encoding: ASCII Latin-1.  
This one works on both Windows and Linux.  
So we don’t need to change anything when we send the files.  
Latin-1 is also called ISO 8859-1.  

So I set this type on the file with the `chtag` command.

---

Let’s edit the file and also add the encoding used  

Internally, Python handles files in UTF-8.
so need to tell it our file is in Latin-1.  
Then, Python will take care of the change.

---

Let’s write our program — the famous Hello World  

Now we check the content of the file  
Then the content of the folder  
And finally then the encoding of the file  

Let’s run this nice program  

Great — no demo problem, everything works!  
We check the folder again  
Nothing special  

---

Now, Let’s add a new use case — call a math function (for example: square root)  

but, To do this, we will put the calculation in another file
Let’s create a new file: my_square.py  
we Tag the file witch chtag  
We Add the code  

We Change our first program to display the square root of 10  

and we Run the program again  

OK, it works  

Now we check the folder  
interesting, a new folder was created: __pycache__  

This is a cache used by Python…  

Why does Python do that?  
For performance reasons, next time Python will run the bytecode directly.

---

But like we saw before Python doesn’t do that every time.  
In fact, Python does this only if the program uses external modules.

But the problem with this system is...  
In production, folders and also loadlibs are protected.
The user who runs the code won’t be allowed to write anythings in the folder.
so z/os gives an error: ICH408.

---

Another problem is...  
If the source file is visible and editable in production, it’s not safe.

To fix this...  
We can compile manually all files before putting it in production.  
Then we only use the compiled files.

Let’s see how  
I have a Python script to do this.

It’s very simple  
Nothing special in this process.
it's a standard and native python function.

Run the result  
We run the compiled file.

---

This is how we work in our CI/CD process with Changeman.  
and then We only deploy `.pyc` files.

Also, it solves the other problem…  
These files can’t be read — it’s safer.

---

So that’s the special situation we faced when deploying Python code in our DEV PROD for our tools."
