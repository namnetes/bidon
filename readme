Super projet, Magali ! Voici un tutoriel complet et accessible pour mettre en place un environnement de développement moderne sur Ubuntu 18.04, en utilisant Docker pour contourner les limitations de ton système. On va tout couvrir, étape par étape 🛠️🐧🐍

---

# 🧰 Tutoriel : Environnement de développement Python/Ansible avec Docker sur Ubuntu 18.04

## 🗺️ Objectif
Créer un environnement de développement moderne, isolé dans des conteneurs Docker, pour travailler avec Python, Ansible, Git, et Visual Studio Code, tout en synchronisant les sources avec GitLab.

---

## 1️⃣ Pré-requis : Mise à jour du système

Ubuntu 18.04 est en fin de vie, donc certaines versions de logiciels peuvent être obsolètes. On commence par mettre à jour ce qui est possible :

```bash
sudo apt update && sudo apt upgrade -y
```

Ensuite, installe quelques outils de base :

```bash
sudo apt install -y curl wget gnupg lsb-release software-properties-common
```

---

## 2️⃣ Installation des outils de base

### 🐙 Git

```bash
sudo apt install -y git
git config --global user.name "TonNom"
git config --global user.email "ton.email@example.com"
```

### 🐳 Docker

Ubuntu 18.04 ne fournit pas la dernière version de Docker. On installe depuis le dépôt officiel :

```bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) stable"

sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io
```

Ajoute ton utilisateur au groupe `docker` pour éviter d’utiliser `sudo` à chaque fois :

```bash
sudo usermod -aG docker $USER
newgrp docker
```

Teste :

```bash
docker run hello-world
```

### 🧠 VS Code

La version via `apt` est souvent ancienne. Pour une version plus récente :

```bash
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
sudo apt update
sudo apt install -y code
```

---

## 3️⃣ Création du projet local

Crée un dossier pour ton projet :

```bash
mkdir -p ~/dev/mon-projet
cd ~/dev/mon-projet
git init
```

---

## 4️⃣ 🔧 Dockerfile pour Python + Ansible

Crée un fichier `Dockerfile` :

```Dockerfile
# Dockerfile
FROM python:3.11-slim

# Installer Ansible
RUN pip install --no-cache-dir ansible

# Créer un utilisateur non-root
RUN useradd -ms /bin/bash devuser
USER devuser
WORKDIR /home/devuser/app

# Copier les sources (optionnel si montés plus tard)
# COPY . .

CMD ["bash"]
```

---

## 5️⃣ 🏗️ Construction et exécution du conteneur

Dans le dossier du projet :

```bash
docker build -t dev-python-ansible .
```

Lance le conteneur en montant ton dossier local :

```bash
docker run -it --rm \
  -v ~/dev/mon-projet:/home/devuser/app \
  --name dev-env \
  dev-python-ansible
```

Tu es maintenant dans un shell isolé avec Python et Ansible 🎉

---

## 6️⃣ 🧪 Tests de fonctionnement

### ✅ Python

```bash
python --version
python -c "print('Hello from Python!')"
```

### ✅ Ansible

```bash
ansible --version
ansible localhost -m ping --connection=local
```

---

## 7️⃣ 🔗 Synchronisation avec GitLab

### Étapes :

1. Crée un dépôt sur GitLab.
2. Récupère l’URL du dépôt (ex : `git@gitlab.com:utilisateur/mon-projet.git`)
3. Ajoute le dépôt distant :

```bash
git remote add origin git@gitlab.com:utilisateur/mon-projet.git
```

4. Ajoute tes fichiers et pousse :

```bash
git add .
git commit -m "Initial commit"
git push -u origin master
```

💡 Astuce : utilise une clé SSH pour éviter de taper ton mot de passe à chaque fois. Génère-la avec :

```bash
ssh-keygen -t ed25519 -C "ton.email@example.com"
cat ~/.ssh/id_ed25519.pub
```

Ajoute la clé publique dans GitLab (Paramètres > SSH Keys).

---

## 8️⃣ 🧼 Conseils de maintenance sur Ubuntu 18.04

- Utilise Docker pour encapsuler les outils récents.
- Mets à jour Docker et VS Code via leurs dépôts officiels.
- Pour Python, utilise des images Docker officielles (`python:3.11`, etc.).
- Pour Ansible, installe via `pip` dans le conteneur.
- Garde tes sources hors du conteneur pour faciliter la synchronisation et l’édition.
- Utilise des volumes Docker pour persister les données.

---

## 🧠 Bonus : VS Code + Docker

Installe l’extension **Remote - Containers** dans VS Code pour éditer directement les fichiers dans le conteneur :

1. Ouvre VS Code
2. Installe l’extension "Remote - Containers"
3. Crée un fichier `.devcontainer/devcontainer.json` :

```json
{
  "name": "Python Ansible Dev",
  "build": {
    "dockerfile": "../Dockerfile"
  },
  "workspaceFolder": "/home/devuser/app",
  "mounts": [
    "source=${localWorkspaceFolder},target=/home/devuser/app,type=bind"
  ]
}
```

4. Ouvre le dossier dans VS Code et choisis "Reopen in Container"

---

## 🏁 Conclusion

Tu as maintenant un environnement moderne, isolé, et maintenable pour développer en Python et Ansible, même sur une vieille Ubuntu 18.04. Grâce à Docker, tu contournes les limitations du système tout en gardant une intégration fluide avec GitLab et VS Code.

Si tu veux aller plus loin, je peux t’aider à ajouter des tests automatisés, des rôles Ansible, ou même du CI/CD avec GitLab. Tu veux qu’on explore ça ensuite ?
