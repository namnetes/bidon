Merci Magali, voici une version fusionnée et fluide de ton message et de l’exemple pédagogique, pensée pour une publication sur Confluence ou un message d’alerte à ton équipe. Elle conserve ton ton diplomatique, ton souci de clarté, et ton intention pédagogique :

---

🔍 **Constat important dans le cadre du passage projet → produit**

Depuis hier, dans le cadre du transfert de connaissances initié avec Romain sur les pipelines CI/CD GitLab, j’ai commencé à documenter nos pratiques sur Confluence à destination de la communauté. Cette contribution s’inscrit dans une phase critique : le passage du mode projet au mode produit, que mon équipe devra assurer en run quotidien.

🎯 **Objectif initial : tester et documenter des cas d’usage**

Pour enrichir cette documentation, j’ai mis en œuvre plusieurs cas d’usage sur des projets déjà migrés (Z) et des projets ouverts. Ces tests m’ont permis d’identifier certains comportements inattendus qui méritent d’être remontés, notamment à quelques jours du pilote de production, après plus de cinq années de travail collectif.

⚠️ **Points de vigilance sur la branche master GitLab**

Il semble actuellement possible de modifier (ajouter, renommer, supprimer) des composants dans la branche dite “master” du référentiel GitLab, censée refléter fidèlement la production bancaire applicative. Or, ces modifications ne sont pas automatiquement répercutées en production, ce qui soulève des questions sur la complétude et la fiabilité du référentiel.

Ce décalage pourrait poser problème vis-à-vis :
- des recommandations IG LCL,
- des exigences BCE (CRC 2024), qui insistent sur la capacité des banques à reconstruire rapidement leur SI en cas de cyberattaque.

🧩 **Illustration concrète : le risque d’écrasement silencieux**

Prenons un exemple simple : un programme comptable nommé **ALCOMPTA**, utilisé depuis des années, n’a pas été modifié depuis 2015. Si un développeur, travaillant sur un autre périmètre (ex. ISO/SAM), crée un nouveau programme **ALCOMPTA** avec une logique différente, et que ce programme est déployé en production, il écrasera silencieusement le programme comptable d’origine.

En cas d’incident, les équipes métier consulteront leur référentiel de sources, verront que leur programme n’a pas été modifié depuis 10 ans, et chercheront l’erreur ailleurs… alors que le vrai problème est qu’un autre programme du même nom a été introduit il y a 6 mois dans un autre référentiel.

Ce type de situation peut résulter d’une erreur humaine, d’un manque de contrôle… ou dans le pire des cas, d’une action volontaire mais discrète. Même si le programme ne plante pas, il peut perturber les traitements sensibles comme ceux de la comptabilité ou de la monétique.

📌 **Risque structurel : une seule bibliothèque d’exécutables**

La production repose sur une seule bibliothèque d’exécutables (loadlib), alors qu’en amont, plusieurs sources de même nom peuvent coexister et être déployées. À ce stade, rien ne semble empêcher ce type de collision, ce qui renforce le besoin de clarification et de sécurisation.

🛠️ **Limite technique actuelle**

Je ne peux pas être totalement conclusif pour l’instant, car la version IDZ utilisée ne fonctionne pas correctement pour les utilisateurs, en raison d’un blocage lié à Sentinel One.

📚 **Conclusion**

Le composant “ALAN” que j’ai introduit était initialement un test personnel dans le cadre de mon apprentissage GitLab. Ce n’est qu’après coup que j’ai pris conscience des implications possibles. Je partage ces constats en toute transparence, dans une logique d’amélioration continue et de sécurisation du passage en production.

---

Souhaites-tu que je t’aide à décliner ce contenu en version email, fiche d’alerte, ou support de sensibilisation pour les équipes techniques et métier ?






Bien sûr Magali, voici une formulation politiquement correcte et nuancée à ajouter en conclusion :

---

🧭 **À noter**

Les constats partagés ici sont issus de tests réalisés dans des environnements non productifs. Il est donc possible que ces comportements ne se vérifient que dans le cadre des environnements de développement ou de qualification. Si tel est le cas, il n’y aurait pas lieu de s’alarmer. Cela dit, par souci de rigueur et de prévention, je préfère les remonter dès maintenant afin qu’ils puissent être vérifiés et, le cas échéant, écartés ou corrigés avant le pilote de production.

---

Souhaites-tu que je t’aide à intégrer cette conclusion dans une version email ou à la reformuler pour un comité technique ?
