Voici une documentation complète pour intégrer Cygwin dans Visual Studio Code (VSCode) afin de développer efficacement en Bash sous Windows 11.

---

📘 Documentation : Développement Bash avec Cygwin dans VSCode

🧭 Objectif
Configurer Visual Studio Code pour utiliser Cygwin comme environnement Bash, permettant l’écriture, l’exécution et le débogage de scripts shell dans un cadre moderne et productif.

---

🛠️ Prérequis

- ✅ Windows 11
- ✅ Visual Studio Code installé
- ✅ Cygwin installé avec le shell Bash (bash) et les outils de base (coreutils, grep, sed, etc.)
- ✅ Extension ShellCheck installée dans VSCode (pour la vérification des scripts Bash)

---

🧩 Étapes d’intégration

1. 📍 Ajouter Cygwin au PATH de Windows

Ajoute le chemin vers les binaires Cygwin dans les variables d’environnement :

`plaintext
C:\cygwin64\bin
`

Cela permet à VSCode d’exécuter les commandes Bash via Cygwin.

---

2. 🖥️ Configurer le terminal intégré pour utiliser Bash (Cygwin)

Dans settings.json de VSCode :

`json
"terminal.integrated.profiles.windows": {
  "Cygwin Bash": {
    "path": "C:\\cygwin64\\bin\\bash.exe",
    "args": ["-l"]
  }
},
"terminal.integrated.defaultProfile.windows": "Cygwin Bash"
`

> 🔧 Adapte le chemin si Cygwin est installé ailleurs.

---

3. 🧪 Créer et exécuter un script Bash

Exemple de script : hello.sh

`bash

!/bin/bash
echo "Bonjour depuis Cygwin Bash dans VSCode !"
`

Exécution dans le terminal intégré

1. Ouvre le terminal (Ctrl + ).
2. Tape :
   `bash
   bash hello.sh
   `

---

4. 🧠 Ajouter ShellCheck pour l’analyse statique

- Installe l’extension ShellCheck depuis le Marketplace VSCode.
- Elle signale les erreurs de syntaxe, les mauvaises pratiques et les suggestions d’amélioration.

---

5. 🧰 Astuces pour un environnement Bash productif

- Utilise des snippets personnalisés pour accélérer l’écriture de scripts.
- Active la coloration syntaxique pour .sh, .bash, .zsh.
- Configure des tâches VSCode pour exécuter automatiquement des scripts :

Exemple de tasks.json

`json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Exécuter script Bash",
      "type": "shell",
      "command": "bash",
      "args": ["${file}"],
      "group": "build",
      "problemMatcher": []
    }
  ]
}
`

---

✅ Vérification

1. Crée un fichier .sh dans VSCode.
2. Ouvre le terminal intégré → vérifie que c’est bien Cygwin Bash.
3. Exécute ton script → observe la sortie.
4. ShellCheck signale les erreurs éventuelles.

---

🔗 Ressources utiles

- Introduction à Bash : Scripts et commandes de base
- Maîtriser le shell Bash – FUN MOOC
- Débuter avec les scripts Bash – IT-Connect
- ShellCheck sur GitHub

---

Souhaites-tu que je t’aide à créer un projet Bash complet dans VSCode avec des exemples de scripts et de tâches automatisées ?